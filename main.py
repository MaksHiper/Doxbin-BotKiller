import telebot
import sqlite3
from telebot import types
from config import bot

bot = bot


def users_check(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM users WHERE id = ?", (chat_id,))
    result = cur.fetchone()
    conn.close()
    if result[0] > 0:
        return True
    else:
        return False
    
def post_check(num):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("killed.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM killed WHERE phone = ?", (num,))
    result = cur.fetchone()
    conn.close()
    if result[0] > 0:
        return True
    else:
        return False
    
def social_check(social):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–æ–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("killed.db")
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM killed WHERE social_networks = ?", (social,))
    result = cur.fetchone()
    conn.close()
    if result[0] > 0:
        return True
    else:
        return False

def create_killed_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("killed.db")
    cur = conn.cursor()
    cur.execute("CREATE TABLE IF NOT EXISTS killed (phone TEXT, name TEXT, social_networks TEXT, tags TEXT, other_data TEXT)")
    conn.commit()
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    """–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç"""
    chat_id = message.chat.id
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    create_killed_table()
    cur.execute("CREATE TABLE IF NOT EXISTS killed (id INTEGER, name TEXT, username TEXT)")
    conn.commit()

    is_existing = users_check(chat_id)
    
    if is_existing == False:
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é!")
        cur.execute("INSERT INTO users (id, name, username) VALUES (?, ?, ?)", (chat_id, message.from_user.first_name, message.from_user.username))
        conn.commit()

    elif is_existing == True:
        bot.send_message(message.chat.id, f"–†–∞–¥ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å, {message.from_user.first_name}. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é!")
    
    conn.close()
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn1 = types.KeyboardButton("üéØ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—Éüòà")
    btn2 = types.KeyboardButton("‚úÖ–ó–∞–ø–æ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µüóÇÔ∏è")
    btn3 = types.KeyboardButton("üé∞–ü–æ–∏—Å–∫ü™¨")
    
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def buttons(message):
    """–ö–Ω–æ–ø–∫–∏ –∏ –∏—Ö —Ä–∞–±–æ—Ç–∞"""
    if message.text == "‚úÖ–ó–∞–ø–æ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µüóÇÔ∏è":
        chat_id = message.chat.id
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, process_phone)

    elif message.text == "üé∞–ü–æ–∏—Å–∫ü™¨":
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        btn1 = types.KeyboardButton("üì± –ù–æ–º–µ—Ä üìû")
        btn2 = types.KeyboardButton("üóÇÔ∏è –§–ò–û ‚ö∞Ô∏è")
        btn3 = types.KeyboardButton("üñ•Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç—å üíµ")
        btn4 = types.KeyboardButton("üñãÔ∏è –î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ üîì")
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEKru1lRkbUK_zVzZNknekzMyEriTwaCgAC_ScAArMdyEgmJ6P4H0WIVzME")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, search_buttons)
def search_buttons(message):
    if message.text == "üì± –ù–æ–º–µ—Ä üìû":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
        bot.register_next_step_handler(message, search_phone)
    elif message.text == "üñ•Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç—å üíµ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ü —Å–µ—Ç–∏:")
        bot.register_next_step_handler(message, social_network_search)

def process_phone(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    global chat_id
    chat_id = message.chat.id
    global num
    num = message.text  
    is_posted = post_check(num)  
    if not is_posted:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        bot.register_next_step_handler(message, process_name)  
    else:
        bot.send_message(chat_id, "–¢–∞–∫–æ–π –ø–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        
def process_name(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    try:
        chat_id = message.chat.id
        global name
        name = message.text
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏:")
        bot.register_next_step_handler(message, process_social_networks)
    except Exception as e:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑.")
        
def process_social_networks(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ªo–∫ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    try:
        global social
        social = message.text
        is_posted = social_check(social)  
        if not is_posted:
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ —Ç—ç–≥–∏ –∫ –∑–∞–ø–∏—Å–∏:")
            bot.register_next_step_handler(message, process_tags)
        else:
            bot.send_message(chat_id, "–¢–∞–∫–æ–π –ø–æ—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü. —Å–µ—Ç–∏ –µ—â–µ —Ä–∞–∑.")

def process_tags(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—ç–≥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        global tags
        tags = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        bot.register_next_step_handler(message, process_otherdata)
    except Exception:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        
def process_otherdata(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        other_data = message.text
        save_data(chat_id, num, name, social, tags, other_data)
    except Exception as e:
        pass

def save_data(chat_id, num, name, social, tags, other_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        conn = sqlite3.connect("killed.db")
        cur = conn.cursor()
        cur.execute("INSERT INTO killed (phone, name, social_networks, tags, other_data) VALUES (?, ?, ?, ?, ?)",
                    (num, name, social, tags, other_data))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑.")

def search_phone(message):
    """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    num = message.text
    con = sqlite3.connect("killed.db")
    cur = con.cursor()

    cur.execute("SELECT * FROM killed WHERE phone = ?", (num,))
    res = cur.fetchall()

    con.close()

    if res:
        result_str = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for row in res:
            result_str += f"–ò–º—è: {row[1]}\n–°–æ—Ü. —Å–µ—Ç–∏: {row[2]}\n–î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ: {row[3]}\n\n"
        bot.send_message(message.chat.id, result_str)
    else:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def social_network_search(message):
    try:
        input_text = message.text
        urls = [url.strip() for url in input_text.split(",")]

        con = sqlite3.connect("killed.db")
        cur = con.cursor()

        results = []

        for url in urls:
            cur.execute("SELECT * FROM killed WHERE social_networks LIKE ? OR tags LIKE ?", ('%' + url + '%', '%' + url + '%'))
            res = cur.fetchall()

            if res:
                result = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Å—ã–ª–∫–∏ {url}:\n"
                for entry in res:
                    result += f"–ù–æ–º–µ—Ä: {entry[0]}\n–ò–º—è: {entry[1]}\n–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü —Å–µ—Ç–∏: {entry[2]}\n–î—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ: {entry[3]}\n–¢—ç–≥–∏: {entry[4]}\n\n"
                results.append(result)

        con.close()

        if results:
            result_message = "\n".join(results)
            bot.send_message(message.chat.id, result_message)
        else:
            bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
#–ü–æ—á–∏–Ω–∏—Ç—å –≤—ã–≤–æ
if __name__ == '__main__':
    bot.infinity_polling(none_stop=True)
